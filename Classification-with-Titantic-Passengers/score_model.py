#!/usr/bin/env/python3
"""
Created on Sept 22 2018
@author: Kyle Gilde
"""

import pandas as pd
import pickle
from sklearn.metrics import precision_recall_fscore_support

def save_classification_report(class_report, csv_filename):
    """
    Takes the tuple produced by sklearn precision_recall_fscore_support as input
    Creates a dataframa that is the equivalent table generated by sklearn's classification_report
    Writes the dataframa to CSV
    Source: https://stackoverflow.com/questions/39662398/scikit-learn-output-metrics-classification-report-into-csv-tab-delimited-format
    """
    if not isinstance(class_report, tuple):  #source: https://stackoverflow.com/questions/7086990/how-to-know-if-a-variable-is-a-tuple-a-string-or-an-integer
        print('InputError: Please use the tuple from precision_recall_fscore_support')
    elif csv_filename[-4:] != '.csv' or len(csv_filename) < 5:
        print('InputError: Please use a proper CSV filename.')
    else:
        out_dict = {}
        columns = ['precision', 'recall', 'f1_score', 'support']
        zipped = zip(columns, class_report)
        for column, array in zipped: # create dict
            out_dict[column] = array
        out_df = pd.DataFrame(out_dict, index=pipeline.classes_) # cast as df
        avg_tot = (out_df.apply(lambda x: x.mean() if x.name!="support" else  x.sum()).to_frame().T) # get column means
        avg_tot.index = ["avg/total"]
        out_df = out_df.append(avg_tot).round(2)
        out_df.to_csv(csv_filename)

try:
    # Read csvs
    X_test, y_holdout_df, X_holdout = pd.read_csv('X_test.csv'), pd.read_csv('y_holdout_df.csv'), pd.read_csv('X_holdout.csv')
    # Open ML Pipeline
    pipeline = pickle.load(open('knn_pipeline.pkl', 'rb')) #Source: https://stackoverflow.com/questions/18963949/error-pickling-in-python-io-unsupportedoperation-read
except Exception as e:
    print(e)
    print('Failed to load CSVs or model.')
else:
    # test model on holdout dataset
    y_holdout_pred = pipeline.predict(X_holdout)
    # create cassification metrics
    class_report = precision_recall_fscore_support(y_holdout_df.y_holdout, y_holdout_pred)
    # create CSV
    save_classification_report(class_report, 'class_report.csv')
    # predict y for text X
    df = pd.DataFrame()
    df['y_pred'] = pipeline.predict(X_test)
    # write to CSV
    df.y_pred.to_csv('y_pred.csv', index=False)

    print('class_report.csv & y_pred.csv should now be found be in the working directory.')